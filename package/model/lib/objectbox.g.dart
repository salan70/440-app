// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;

import 'src/feature/push_notification/domain/notification_setting.dart';
import 'src/feature/search_condition/search_condition.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1611067534927609035),
      name: 'NotificationSetting',
      lastPropertyId: const obx_int.IdUid(4, 3892540581015079485),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5308825668056691646),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7401731896697497473),
            name: 'allowStartDailyQuizNotification',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 161529505523521491),
            name: 'allowRemindDailyQuizNotification',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3892540581015079485),
            name: 'allowOtherNotification',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 4131741894832968559),
      name: 'SearchCondition',
      lastPropertyId: const obx_int.IdUid(6, 8061367714603997207),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7765768366259602580),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3770240481247167490),
            name: 'minGames',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3346020221235882163),
            name: 'minHits',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5099403966205470614),
            name: 'minHr',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2684405855504468263),
            name: 'teamList',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8061367714603997207),
            name: 'selectedStatsList',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
obx.Store openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) {
  return obx.Store(getObjectBoxModel(),
      directory: directory,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 4131741894832968559),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    NotificationSetting: obx_int.EntityDefinition<NotificationSetting>(
        model: _entities[0],
        toOneRelations: (NotificationSetting object) => [],
        toManyRelations: (NotificationSetting object) => {},
        getId: (NotificationSetting object) => object.id,
        setId: (NotificationSetting object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field NotificationSetting.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (NotificationSetting object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.allowStartDailyQuizNotification);
          fbb.addBool(2, object.allowRemindDailyQuizNotification);
          fbb.addBool(3, object.allowOtherNotification);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final allowStartDailyQuizNotificationParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false);
          final allowRemindDailyQuizNotificationParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final allowOtherNotificationParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final object = NotificationSetting(
              id: idParam,
              allowStartDailyQuizNotification:
                  allowStartDailyQuizNotificationParam,
              allowRemindDailyQuizNotification:
                  allowRemindDailyQuizNotificationParam,
              allowOtherNotification: allowOtherNotificationParam);

          return object;
        }),
    SearchCondition: obx_int.EntityDefinition<SearchCondition>(
        model: _entities[1],
        toOneRelations: (SearchCondition object) => [],
        toManyRelations: (SearchCondition object) => {},
        getId: (SearchCondition object) => object.id,
        setId: (SearchCondition object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field SearchCondition.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (SearchCondition object, fb.Builder fbb) {
          final teamListOffset = fbb.writeList(
              object.teamList.map(fbb.writeString).toList(growable: false));
          final selectedStatsListOffset = fbb.writeList(object.selectedStatsList
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.minGames);
          fbb.addInt64(2, object.minHits);
          fbb.addInt64(3, object.minHr);
          fbb.addOffset(4, teamListOffset);
          fbb.addOffset(5, selectedStatsListOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final teamListParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 12, []);
          final minGamesParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final minHitsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final minHrParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final selectedStatsListParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 14, []);
          final object = SearchCondition(
              id: idParam,
              teamList: teamListParam,
              minGames: minGamesParam,
              minHits: minHitsParam,
              minHr: minHrParam,
              selectedStatsList: selectedStatsListParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [NotificationSetting] entity fields to define ObjectBox queries.
class NotificationSetting_ {
  /// See [NotificationSetting.id].
  static final id =
      obx.QueryIntegerProperty<NotificationSetting>(_entities[0].properties[0]);

  /// See [NotificationSetting.allowStartDailyQuizNotification].
  static final allowStartDailyQuizNotification =
      obx.QueryBooleanProperty<NotificationSetting>(_entities[0].properties[1]);

  /// See [NotificationSetting.allowRemindDailyQuizNotification].
  static final allowRemindDailyQuizNotification =
      obx.QueryBooleanProperty<NotificationSetting>(_entities[0].properties[2]);

  /// See [NotificationSetting.allowOtherNotification].
  static final allowOtherNotification =
      obx.QueryBooleanProperty<NotificationSetting>(_entities[0].properties[3]);
}

/// [SearchCondition] entity fields to define ObjectBox queries.
class SearchCondition_ {
  /// See [SearchCondition.id].
  static final id =
      obx.QueryIntegerProperty<SearchCondition>(_entities[1].properties[0]);

  /// See [SearchCondition.minGames].
  static final minGames =
      obx.QueryIntegerProperty<SearchCondition>(_entities[1].properties[1]);

  /// See [SearchCondition.minHits].
  static final minHits =
      obx.QueryIntegerProperty<SearchCondition>(_entities[1].properties[2]);

  /// See [SearchCondition.minHr].
  static final minHr =
      obx.QueryIntegerProperty<SearchCondition>(_entities[1].properties[3]);

  /// See [SearchCondition.teamList].
  static final teamList = obx.QueryStringVectorProperty<SearchCondition>(
      _entities[1].properties[4]);

  /// See [SearchCondition.selectedStatsList].
  static final selectedStatsList =
      obx.QueryStringVectorProperty<SearchCondition>(
          _entities[1].properties[5]);
}
